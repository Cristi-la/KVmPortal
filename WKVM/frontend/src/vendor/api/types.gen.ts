// This file is auto-generated by @hey-api/openapi-ts

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type Hypervisor = {
    readonly id: number;
    readonly tags: Array<TagAbstract>;
    readonly vms: Array<VMAbstract>;
    readonly xmls: Array<XmlAbstract>;
    readonly created: string;
    readonly updated: string;
    description?: string | null;
    hostname: string;
    mgt_ip: string;
    instance?: number;
    auth?: number | null;
};

export type HypervisorAbstract = {
    readonly id: number;
    hostname: string;
    mgt_ip: string;
};

export type Message = {
    message: string;
};

export type PaginatedHypervisorList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<Hypervisor>;
};

export type PaginatedVMList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<VM>;
};

export type SiteTokenObtainPair = {
    username: string;
    password: string;
};

/**
 * * `running` - Running
 * * `idle` - Idle
 * * `paused` - Paused
 * * `in shutdown` - In Shutdown
 * * `shut off` - Shut Off
 * * `crashed` - Crashed
 * * `pm suspended` - PM Suspended
 * * `no info` - No Info
 */
export type StateEnum = 'running' | 'idle' | 'paused' | 'in shutdown' | 'shut off' | 'crashed' | 'pm suspended' | 'no info';

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type Tag = {
    readonly id: number;
    readonly created: string;
    readonly updated: string;
    description?: string | null;
    name: string;
    color: string;
    instance?: number;
};

export type TagAbstract = {
    readonly id: number;
    name: string;
    description?: string | null;
    color: string;
};

export type TokenRefresh = {
    readonly access: string;
    refresh: string;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type VM = {
    readonly id: number;
    readonly hypervisor: HypervisorAbstract;
    readonly tags: Array<TagAbstract>;
    readonly created: string;
    readonly updated: string;
    description?: string | null;
    name: string;
    vcpu?: number | null;
    memory?: number | null;
    state?: StateEnum;
    instance?: number;
    xmls?: Array<(number)>;
};

export type VMAbstract = {
    readonly id: number;
    name: string;
    vcpu?: number | null;
    memory?: number | null;
    state?: StateEnum;
    readonly created: string;
    readonly updated: string;
};

export type XMLData = {
    xml_type?: XmlTypeEnum;
    /**
     * SHA-256 hash of the XML data. Leave blank to auto-calculate.
     */
    xml_hash?: string | null;
    raw_xml: string;
};

export type XmlAbstract = {
    readonly id: number;
    xml_type?: XmlTypeEnum;
};

/**
 * * `Capabilities` - Domain capabilities
 * * `SMBIOS` - System Management BIOS (SMBIOS)
 * * `Other` - Other XML data
 */
export type XmlTypeEnum = 'Capabilities' | 'SMBIOS' | 'Other';

export type ApiHypervisorListData = {
    /**
     * Format of the exported data (csv, excel, json)
     */
    _export?: 'csv' | 'excel' | 'json';
    auth?: number;
    created?: string;
    description?: string;
    /**
     * Comma-separated list of fields to include in the output
     */
    fields?: string;
    hostname?: string;
    instance?: number;
    mgtIp?: string;
    /**
     * Which field to use when ordering the results.
     */
    ordering?: string;
    /**
     * A page number within the paginated result set.
     */
    page?: number;
    /**
     * Number of results to return per page.
     */
    pageSize?: number;
    /**
     * A search term.
     */
    search?: string;
    tags?: Array<(number)>;
    updated?: string;
    xmls?: Array<(number)>;
};

export type ApiHypervisorListResponse = PaginatedHypervisorList;

export type ApiHypervisorRetrieveData = {
    /**
     * A unique integer value identifying this hypervisor.
     */
    id: number;
};

export type ApiHypervisorRetrieveResponse = Hypervisor;

export type ApiHypervisorXmlRetrieveData = {
    /**
     * A unique integer value identifying this hypervisor.
     */
    id: number;
    /**
     * Type of the XML data
     */
    xmlType: string;
};

export type ApiHypervisorXmlRetrieveResponse = XMLData;

export type ApiStatusRestCheckRetrieveResponse = Message;

export type ApiTagListResponse = Array<Tag>;

export type ApiTagRetrieveData = {
    /**
     * A unique integer value identifying this tag.
     */
    id: number;
};

export type ApiTagRetrieveResponse = Tag;

export type ApiTokenCreateData = {
    requestBody: SiteTokenObtainPair;
};

export type ApiTokenCreateResponse = SiteTokenObtainPair;

export type ApiTokenRefreshCreateData = {
    requestBody: TokenRefresh;
};

export type ApiTokenRefreshCreateResponse = TokenRefresh;

export type ApiVmListData = {
    /**
     * Format of the exported data (csv, excel, json)
     */
    _export?: 'csv' | 'excel' | 'json';
    created?: string;
    description?: string;
    /**
     * Comma-separated list of fields to include in the output
     */
    fields?: string;
    hypervisor?: number;
    instance?: number;
    memory?: number;
    name?: string;
    /**
     * Which field to use when ordering the results.
     */
    ordering?: string;
    /**
     * A page number within the paginated result set.
     */
    page?: number;
    /**
     * Number of results to return per page.
     */
    pageSize?: number;
    /**
     * A search term.
     */
    search?: string;
    state?: string;
    tags?: Array<(number)>;
    updated?: string;
    vcpu?: number;
    xmls?: Array<(number)>;
};

export type ApiVmListResponse = PaginatedVMList;

export type ApiVmRetrieveData = {
    /**
     * A unique integer value identifying this vm.
     */
    id: number;
};

export type ApiVmRetrieveResponse = VM;

export type ApiVmXmlRetrieveData = {
    /**
     * A unique integer value identifying this vm.
     */
    id: number;
    /**
     * Type of the XML data
     */
    xmlType: string;
};

export type ApiVmXmlRetrieveResponse = XMLData;

export type $OpenApiTs = {
    '/api/hypervisor/': {
        get: {
            req: ApiHypervisorListData;
            res: {
                200: PaginatedHypervisorList;
            };
        };
    };
    '/api/hypervisor/{id}/': {
        get: {
            req: ApiHypervisorRetrieveData;
            res: {
                200: Hypervisor;
            };
        };
    };
    '/api/hypervisor/{id}/xml/': {
        get: {
            req: ApiHypervisorXmlRetrieveData;
            res: {
                200: XMLData;
            };
        };
    };
    '/api/status/rest-check/': {
        get: {
            res: {
                200: Message;
            };
        };
    };
    '/api/tag/': {
        get: {
            res: {
                200: Array<Tag>;
            };
        };
    };
    '/api/tag/{id}/': {
        get: {
            req: ApiTagRetrieveData;
            res: {
                200: Tag;
            };
        };
    };
    '/api/token/': {
        post: {
            req: ApiTokenCreateData;
            res: {
                200: SiteTokenObtainPair;
            };
        };
    };
    '/api/token/refresh/': {
        post: {
            req: ApiTokenRefreshCreateData;
            res: {
                200: TokenRefresh;
            };
        };
    };
    '/api/vm/': {
        get: {
            req: ApiVmListData;
            res: {
                200: PaginatedVMList;
            };
        };
    };
    '/api/vm/{id}/': {
        get: {
            req: ApiVmRetrieveData;
            res: {
                200: VM;
            };
        };
    };
    '/api/vm/{id}/xml/': {
        get: {
            req: ApiVmXmlRetrieveData;
            res: {
                200: XMLData;
            };
        };
    };
};
// This file is auto-generated by @hey-api/openapi-ts

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type Hypervisor = {
    readonly id: number;
    readonly tags: Array<TagAbstract>;
    readonly vms: Array<VMAbstract>;
    readonly created: string;
    readonly updated: string;
    description?: string | null;
    hostname: string;
    mgt_ip: string;
    instance?: number;
    auth?: number;
    xmls?: Array<(number)>;
};

export type HypervisorAbstract = {
    readonly id: number;
    hostname: string;
    mgt_ip: string;
};

export type Message = {
    message: string;
};

export type PaginatedHypervisorList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<Hypervisor>;
};

export type PaginatedTagList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<Tag>;
};

export type PaginatedVMList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<VM>;
};

export type SiteTokenObtainPair = {
    username: string;
    password: string;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type Tag = {
    readonly id: number;
    readonly created: string;
    readonly updated: string;
    description?: string | null;
    name: string;
    color: string;
    instance?: number;
};

export type TagAbstract = {
    readonly id: number;
    name: string;
    description?: string | null;
    color: string;
};

export type TokenRefresh = {
    readonly access: string;
    refresh: string;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type VM = {
    readonly id: number;
    readonly hypervisor: HypervisorAbstract;
    readonly tags: Array<TagAbstract>;
    readonly created: string;
    readonly updated: string;
    description?: string | null;
    name: string;
    vcpu?: number | null;
    memory?: number | null;
    instance?: number;
    xmls?: Array<(number)>;
};

export type VMAbstract = {
    readonly id: number;
    name: string;
    vcpu?: number | null;
    memory?: number | null;
};

export type ApiHypervisorListData = {
    /**
     * Format of the exported data (csv, excel, json)
     */
    _export?: 'csv' | 'excel' | 'json';
    auth?: number;
    created?: string;
    description?: string;
    /**
     * Comma-separated list of fields to include in the output
     */
    fields?: string;
    hostname?: string;
    instance?: number;
    mgtIp?: string;
    /**
     * Which field to use when ordering the results.
     */
    ordering?: string;
    /**
     * A page number within the paginated result set.
     */
    page?: number;
    /**
     * Number of results to return per page.
     */
    pageSize?: number;
    /**
     * A search term.
     */
    search?: string;
    tags?: Array<(number)>;
    updated?: string;
    xmls?: Array<(number)>;
};

export type ApiHypervisorListResponse = PaginatedHypervisorList;

export type ApiHypervisorRetrieveData = {
    /**
     * A unique integer value identifying this hypervisor.
     */
    id: number;
};

export type ApiHypervisorRetrieveResponse = Hypervisor;

export type ApiStatusRestCheckRetrieveResponse = Message;

export type ApiTagListData = {
    /**
     * Format of the exported data (csv, excel, json)
     */
    _export?: 'csv' | 'excel' | 'json';
    color?: string;
    created?: string;
    description?: string;
    /**
     * Comma-separated list of fields to include in the output
     */
    fields?: string;
    instance?: number;
    name?: string;
    /**
     * Which field to use when ordering the results.
     */
    ordering?: string;
    /**
     * A page number within the paginated result set.
     */
    page?: number;
    /**
     * Number of results to return per page.
     */
    pageSize?: number;
    /**
     * A search term.
     */
    search?: string;
    updated?: string;
};

export type ApiTagListResponse = PaginatedTagList;

export type ApiTagRetrieveData = {
    /**
     * A unique integer value identifying this tag.
     */
    id: number;
};

export type ApiTagRetrieveResponse = Tag;

export type ApiTokenCreateData = {
    requestBody: SiteTokenObtainPair;
};

export type ApiTokenCreateResponse = SiteTokenObtainPair;

export type ApiTokenRefreshCreateData = {
    requestBody: TokenRefresh;
};

export type ApiTokenRefreshCreateResponse = TokenRefresh;

export type ApiVmListData = {
    /**
     * Format of the exported data (csv, excel, json)
     */
    _export?: 'csv' | 'excel' | 'json';
    created?: string;
    description?: string;
    /**
     * Comma-separated list of fields to include in the output
     */
    fields?: string;
    hypervisor?: number;
    instance?: number;
    memory?: number;
    name?: string;
    /**
     * Which field to use when ordering the results.
     */
    ordering?: string;
    /**
     * A page number within the paginated result set.
     */
    page?: number;
    /**
     * Number of results to return per page.
     */
    pageSize?: number;
    /**
     * A search term.
     */
    search?: string;
    tags?: Array<(number)>;
    updated?: string;
    vcpu?: number;
    xmls?: Array<(number)>;
};

export type ApiVmListResponse = PaginatedVMList;

export type ApiVmRetrieveData = {
    /**
     * A unique integer value identifying this vm.
     */
    id: number;
};

export type ApiVmRetrieveResponse = VM;

export type $OpenApiTs = {
    '/api/hypervisor/': {
        get: {
            req: ApiHypervisorListData;
            res: {
                200: PaginatedHypervisorList;
            };
        };
    };
    '/api/hypervisor/{id}/': {
        get: {
            req: ApiHypervisorRetrieveData;
            res: {
                200: Hypervisor;
            };
        };
    };
    '/api/status/rest-check/': {
        get: {
            res: {
                200: Message;
            };
        };
    };
    '/api/tag/': {
        get: {
            req: ApiTagListData;
            res: {
                200: PaginatedTagList;
            };
        };
    };
    '/api/tag/{id}/': {
        get: {
            req: ApiTagRetrieveData;
            res: {
                200: Tag;
            };
        };
    };
    '/api/token/': {
        post: {
            req: ApiTokenCreateData;
            res: {
                200: SiteTokenObtainPair;
            };
        };
    };
    '/api/token/refresh/': {
        post: {
            req: ApiTokenRefreshCreateData;
            res: {
                200: TokenRefresh;
            };
        };
    };
    '/api/vm/': {
        get: {
            req: ApiVmListData;
            res: {
                200: PaginatedVMList;
            };
        };
    };
    '/api/vm/{id}/': {
        get: {
            req: ApiVmRetrieveData;
            res: {
                200: VM;
            };
        };
    };
};
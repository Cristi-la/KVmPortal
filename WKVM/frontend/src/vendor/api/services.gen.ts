// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { ApiHypervisorListData, ApiHypervisorListResponse, ApiHypervisorRetrieveData, ApiHypervisorRetrieveResponse, ApiStatusRestCheckRetrieveResponse, ApiTagListData, ApiTagListResponse, ApiTagRetrieveData, ApiTagRetrieveResponse, ApiTokenCreateData, ApiTokenCreateResponse, ApiTokenRefreshCreateData, ApiTokenRefreshCreateResponse, ApiVmListData, ApiVmListResponse, ApiVmRetrieveData, ApiVmRetrieveResponse } from './types.gen';

export class ApiService {
    /**
     * @param data The data for the request.
     * @param data.auth
     * @param data.created
     * @param data.description
     * @param data._export Format of the exported data (csv, excel, json)
     * @param data.fields Comma-separated list of fields to include in the output
     * @param data.hostname
     * @param data.instance
     * @param data.mgtIp
     * @param data.ordering Which field to use when ordering the results.
     * @param data.page A page number within the paginated result set.
     * @param data.pageSize Number of results to return per page.
     * @param data.search A search term.
     * @param data.tags
     * @param data.updated
     * @param data.xmls
     * @returns PaginatedHypervisorList
     * @throws ApiError
     */
    public static apiHypervisorList(data: ApiHypervisorListData = {}): CancelablePromise<ApiHypervisorListResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/hypervisor/',
            query: {
                auth: data.auth,
                created: data.created,
                description: data.description,
                export: data._export,
                fields: data.fields,
                hostname: data.hostname,
                instance: data.instance,
                mgt_ip: data.mgtIp,
                ordering: data.ordering,
                page: data.page,
                page_size: data.pageSize,
                search: data.search,
                tags: data.tags,
                updated: data.updated,
                xmls: data.xmls
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this hypervisor.
     * @returns Hypervisor
     * @throws ApiError
     */
    public static apiHypervisorRetrieve(data: ApiHypervisorRetrieveData): CancelablePromise<ApiHypervisorRetrieveResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/hypervisor/{id}/',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * Check REST API
     * This endpoint checks if the REST API is working.
     * @returns Message
     * @throws ApiError
     */
    public static apiStatusRestCheckRetrieve(): CancelablePromise<ApiStatusRestCheckRetrieveResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/status/rest-check/'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.color
     * @param data.created
     * @param data.description
     * @param data._export Format of the exported data (csv, excel, json)
     * @param data.fields Comma-separated list of fields to include in the output
     * @param data.instance
     * @param data.name
     * @param data.ordering Which field to use when ordering the results.
     * @param data.page A page number within the paginated result set.
     * @param data.pageSize Number of results to return per page.
     * @param data.search A search term.
     * @param data.updated
     * @returns PaginatedTagList
     * @throws ApiError
     */
    public static apiTagList(data: ApiTagListData = {}): CancelablePromise<ApiTagListResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/tag/',
            query: {
                color: data.color,
                created: data.created,
                description: data.description,
                export: data._export,
                fields: data.fields,
                instance: data.instance,
                name: data.name,
                ordering: data.ordering,
                page: data.page,
                page_size: data.pageSize,
                search: data.search,
                updated: data.updated
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this tag.
     * @returns Tag
     * @throws ApiError
     */
    public static apiTagRetrieve(data: ApiTagRetrieveData): CancelablePromise<ApiTagRetrieveResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/tag/{id}/',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * Takes a set of user credentials and returns an access and refresh JSON web
     * token pair to prove the authentication of those credentials.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SiteTokenObtainPair
     * @throws ApiError
     */
    public static apiTokenCreate(data: ApiTokenCreateData): CancelablePromise<ApiTokenCreateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/token/',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Takes a refresh type JSON web token and returns an access type JSON web
     * token if the refresh token is valid.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TokenRefresh
     * @throws ApiError
     */
    public static apiTokenRefreshCreate(data: ApiTokenRefreshCreateData): CancelablePromise<ApiTokenRefreshCreateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/token/refresh/',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.created
     * @param data.description
     * @param data._export Format of the exported data (csv, excel, json)
     * @param data.fields Comma-separated list of fields to include in the output
     * @param data.hypervisor
     * @param data.instance
     * @param data.memory
     * @param data.name
     * @param data.ordering Which field to use when ordering the results.
     * @param data.page A page number within the paginated result set.
     * @param data.pageSize Number of results to return per page.
     * @param data.search A search term.
     * @param data.tags
     * @param data.updated
     * @param data.vcpu
     * @param data.xmls
     * @returns PaginatedVMList
     * @throws ApiError
     */
    public static apiVmList(data: ApiVmListData = {}): CancelablePromise<ApiVmListResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/vm/',
            query: {
                created: data.created,
                description: data.description,
                export: data._export,
                fields: data.fields,
                hypervisor: data.hypervisor,
                instance: data.instance,
                memory: data.memory,
                name: data.name,
                ordering: data.ordering,
                page: data.page,
                page_size: data.pageSize,
                search: data.search,
                tags: data.tags,
                updated: data.updated,
                vcpu: data.vcpu,
                xmls: data.xmls
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this vm.
     * @returns VM
     * @throws ApiError
     */
    public static apiVmRetrieve(data: ApiVmRetrieveData): CancelablePromise<ApiVmRetrieveResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/vm/{id}/',
            path: {
                id: data.id
            }
        });
    }
    
}
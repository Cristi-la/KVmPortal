// This file is auto-generated by @hey-api/openapi-ts

export const $Hypervisor = {
    type: 'object',
    description: `A ModelSerializer that takes additional arguments for
"fields", "omit" and "expand" in order to
control which fields are displayed, and whether to replace simple
values with complex, nested serializations`,
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        tags: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TagAbstract'
            },
            readOnly: true
        },
        vms: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/VMAbstract'
            },
            readOnly: true
        },
        created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        updated: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        hostname: {
            type: 'string',
            maxLength: 255
        },
        mgt_ip: {
            type: 'string'
        },
        instance: {
            type: 'integer'
        },
        auth: {
            type: 'integer'
        },
        xmls: {
            type: 'array',
            items: {
                type: 'integer'
            }
        }
    },
    required: ['created', 'hostname', 'id', 'mgt_ip', 'tags', 'updated', 'vms']
} as const;

export const $HypervisorAbstract = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        hostname: {
            type: 'string',
            maxLength: 255
        },
        mgt_ip: {
            type: 'string'
        }
    },
    required: ['hostname', 'id', 'mgt_ip']
} as const;

export const $Message = {
    type: 'object',
    properties: {
        message: {
            type: 'string'
        }
    },
    required: ['message']
} as const;

export const $PaginatedHypervisorList = {
    type: 'object',
    required: ['count', 'results'],
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Hypervisor'
            }
        }
    }
} as const;

export const $PaginatedTagList = {
    type: 'object',
    required: ['count', 'results'],
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Tag'
            }
        }
    }
} as const;

export const $PaginatedVMList = {
    type: 'object',
    required: ['count', 'results'],
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/VM'
            }
        }
    }
} as const;

export const $SiteTokenObtainPair = {
    type: 'object',
    properties: {
        username: {
            type: 'string',
            writeOnly: true
        },
        password: {
            type: 'string',
            writeOnly: true
        }
    },
    required: ['password', 'username']
} as const;

export const $Tag = {
    type: 'object',
    description: `A ModelSerializer that takes additional arguments for
"fields", "omit" and "expand" in order to
control which fields are displayed, and whether to replace simple
values with complex, nested serializations`,
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        updated: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            maxLength: 255
        },
        color: {
            type: 'string',
            maxLength: 7
        },
        instance: {
            type: 'integer'
        }
    },
    required: ['color', 'created', 'id', 'name', 'updated']
} as const;

export const $TagAbstract = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        name: {
            type: 'string',
            maxLength: 255
        },
        description: {
            type: 'string',
            nullable: true
        },
        color: {
            type: 'string',
            maxLength: 7
        }
    },
    required: ['color', 'id', 'name']
} as const;

export const $TokenRefresh = {
    type: 'object',
    properties: {
        access: {
            type: 'string',
            readOnly: true
        },
        refresh: {
            type: 'string'
        }
    },
    required: ['access', 'refresh']
} as const;

export const $VM = {
    type: 'object',
    description: `A ModelSerializer that takes additional arguments for
"fields", "omit" and "expand" in order to
control which fields are displayed, and whether to replace simple
values with complex, nested serializations`,
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        hypervisor: {
            allOf: [
                {
                    '$ref': '#/components/schemas/HypervisorAbstract'
                }
            ],
            readOnly: true
        },
        tags: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TagAbstract'
            },
            readOnly: true
        },
        created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        updated: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            maxLength: 255
        },
        vcpu: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64',
            nullable: true
        },
        memory: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64',
            nullable: true
        },
        instance: {
            type: 'integer'
        },
        xmls: {
            type: 'array',
            items: {
                type: 'integer'
            }
        }
    },
    required: ['created', 'hypervisor', 'id', 'name', 'tags', 'updated']
} as const;

export const $VMAbstract = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        name: {
            type: 'string',
            maxLength: 255
        },
        vcpu: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64',
            nullable: true
        },
        memory: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64',
            nullable: true
        }
    },
    required: ['id', 'name']
} as const;
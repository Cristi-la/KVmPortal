# Generated by Django 5.0.7 on 2024-10-06 20:13

import utils.models
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('kvm', '0018_remove_hypervisor_secmodel_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='vm',
            name='boot_device',
            field=models.CharField(blank=True, help_text='The boot device used by the virtual machine', max_length=16, null=True),
        ),
        migrations.AddField(
            model_name='vm',
            name='clock_adjustment',
            field=models.CharField(blank=True, help_text='Clock adjustment policy.', max_length=256, null=True),
        ),
        migrations.AddField(
            model_name='vm',
            name='clock_offset',
            field=models.CharField(blank=True, help_text="Clock offset (e.g., 'utc').", max_length=16, null=True),
        ),
        migrations.AddField(
            model_name='vm',
            name='clock_timezone',
            field=models.CharField(blank=True, help_text='Clock timezone.', max_length=64, null=True),
        ),
        migrations.AddField(
            model_name='vm',
            name='cpu_check',
            field=models.CharField(blank=True, help_text='CPU check setting.', max_length=64, null=True),
        ),
        migrations.AddField(
            model_name='vm',
            name='cpu_migratable',
            field=models.BooleanField(default=True, help_text='Whether the CPU is migratable.'),
        ),
        migrations.AddField(
            model_name='vm',
            name='cpu_mode',
            field=models.CharField(blank=True, help_text="CPU mode (e.g., 'host-passthrough').", max_length=64, null=True),
        ),
        migrations.AddField(
            model_name='vm',
            name='current_memory',
            field=models.BigIntegerField(blank=True, help_text='The current memory allocation of the virtual machine.', null=True),
        ),
        migrations.AddField(
            model_name='vm',
            name='domain_type',
            field=models.CharField(blank=True, help_text="The type of the domain (e.g., 'kvm').", max_length=16, null=True),
        ),
        migrations.AddField(
            model_name='vm',
            name='dump_core',
            field=models.BooleanField(default=False, help_text='Indicates if core dumps are enabled for the virtual machine.'),
        ),
        migrations.AddField(
            model_name='vm',
            name='features',
            field=utils.models.SeparatedCharField(blank=True, help_text='The features enabled for the virtual machine.', null=True),
        ),
        migrations.AddField(
            model_name='vm',
            name='on_crash',
            field=models.CharField(blank=True, help_text='Action on crash.', max_length=16, null=True),
        ),
        migrations.AddField(
            model_name='vm',
            name='on_poweroff',
            field=models.CharField(blank=True, help_text='Action on power off.', max_length=16, null=True),
        ),
        migrations.AddField(
            model_name='vm',
            name='on_reboot',
            field=models.CharField(blank=True, help_text='Action on reboot.', max_length=16, null=True),
        ),
        migrations.AddField(
            model_name='vm',
            name='os_arch',
            field=models.CharField(blank=True, help_text='The architecture of the operating system', max_length=16, null=True),
        ),
        migrations.AddField(
            model_name='vm',
            name='os_machine',
            field=models.CharField(blank=True, help_text='The machine type of the operating system', max_length=64, null=True),
        ),
        migrations.AddField(
            model_name='vm',
            name='os_type',
            field=models.CharField(blank=True, help_text="The type of the operating system (e.g., 'hvm').", max_length=64, null=True),
        ),
        migrations.AddField(
            model_name='vm',
            name='pm_suspend_to_disk',
            field=models.BooleanField(default=False, help_text='Whether suspend to disk is enabled.'),
        ),
        migrations.AddField(
            model_name='vm',
            name='pm_suspend_to_mem',
            field=models.BooleanField(default=False, help_text='Whether suspend to memory is enabled.'),
        ),
        migrations.AddField(
            model_name='vm',
            name='timers',
            field=models.JSONField(blank=True, help_text='Timers configuration.', null=True),
        ),
        migrations.AddField(
            model_name='vm',
            name='uuid',
            field=models.UUIDField(blank=True, help_text='The UUID of the virtual machine.', null=True),
        ),
        migrations.AddField(
            model_name='vm',
            name='vcpu_placement',
            field=models.CharField(blank=True, help_text="The CPU placement strategy (e.g., 'static', 'dynamic').", max_length=16, null=True),
        ),
        migrations.AlterField(
            model_name='vm',
            name='memory',
            field=models.BigIntegerField(blank=True, help_text='The amount of memory allocated to the virtual machine in kilobytes.', null=True),
        ),
        migrations.AlterField(
            model_name='vm',
            name='name',
            field=models.CharField(blank=True, help_text='The name of the virtual machine.', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='vm',
            name='vcpu',
            field=models.IntegerField(blank=True, help_text='The number of virtual CPUs allocated to the virtual machine.', null=True),
        ),
    ]
